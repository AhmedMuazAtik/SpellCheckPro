/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.spellcheckpro;

import java.awt.Color;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Document;
import javax.swing.text.Highlighter;
import javax.swing.text.JTextComponent;

/**
 *
 * @author ahmed
 */
public class AhmedMuazAtikObadaMasriGUI<T> extends javax.swing.JFrame {

    //Creating binary tree
    AhmedMuazAtikObadaMasriBinaryTree<T> bt = new AhmedMuazAtikObadaMasriBinaryTree<>();

    //Global variables
    String new_string = "";

    int start_index = 0;
    int end_index = 0;

    int suggestion_count = 0;

    boolean if_pressed = false;

    public AhmedMuazAtikObadaMasriGUI() {
        initComponents();

        //Setting title
        this.setTitle("SPELLCHECKERPRO");

        //Setting the first location of the window to the center
        this.setLocationRelativeTo(null);

        try {
            File file = new File("C:\\Users\\ahmed\\Desktop\\SpellCheckPro\\words.txt"); //Creating file from the specific path
            Scanner myReader = new Scanner(file); //Creating scanner object
            while (myReader.hasNextLine()) { //Getting the lines of the file
                String data = myReader.nextLine();

                String temp = "";

                for (int i = 0; i < data.length(); i++) {

                    if (data.charAt(i) != ',') { //Seperating the words using commas
                        temp += data.charAt(i);
                    } else {
                        bt.insert(temp); //Inserting into the binary tree
                        temp = "";
                    }
                }

            }
            myReader.close(); //Closing the file
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(rootPane, "Error"); //Checking for error
            e.printStackTrace();
        }
    }

    //Highlight function for highlighting over words
    public void highlight(JTextComponent textComp, String pattern) {

        try {
            Document docs = textComp.getDocument();
            Highlighter highlight = textComp.getHighlighter();
            String text = docs.getText(0, docs.getLength());

            int position = 0;
            
            while ((position = text.indexOf(pattern, position)) >= 0) {
                
                highlight.addHighlight(position, position + pattern.length(), myHighlightPainter);
                position += pattern.length();
            }

        } catch (BadLocationException e) {
        }
    }

    Highlighter.HighlightPainter myHighlightPainter = new MyHighlightPainter(Color.red); //Creating highlight object

    // A private subclass of the default highlight painter
    class MyHighlightPainter
            extends DefaultHighlighter.DefaultHighlightPainter {

        public MyHighlightPainter(Color color) {
            super(color);
        }
    }
    
    public void removeDuplicates(DefaultListModel<String> listModel) {
        for (int i = 0; i < listModel.getSize(); i++) {
            String element = listModel.getElementAt(i);
            for (int j = i + 1; j < listModel.getSize(); j++) {
                if (element == listModel.getElementAt(j)) {
                    listModel.removeElementAt(j);
                    j--;
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tf_input = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        spinner_key = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_output = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        ta_output = new javax.swing.JTextArea();
        btn_auto = new javax.swing.JButton();
        btn_suggest = new javax.swing.JButton();

        jLabel4.setFont(new java.awt.Font("Titillium Web Light", 0, 36)); // NOI18N
        jLabel4.setText("SPELLCHECKERPRO");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setForeground(new java.awt.Color(102, 102, 102));

        jLabel1.setFont(new java.awt.Font("Titillium Web Light", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 153));
        jLabel1.setText("SPELLCHECKERPRO");

        jLabel2.setFont(new java.awt.Font("Titillium Web Light", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Input:");

        tf_input.setBackground(new java.awt.Color(153, 153, 153));
        tf_input.setFont(new java.awt.Font("Titillium Web Light", 0, 12)); // NOI18N
        tf_input.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tf_inputMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tf_inputMouseReleased(evt);
            }
        });
        tf_input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_inputActionPerformed(evt);
            }
        });
        tf_input.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tf_inputKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tf_inputKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tf_inputKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Titillium Web Light", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Key:");

        spinner_key.setFont(new java.awt.Font("Titillium Web Light", 0, 12)); // NOI18N
        spinner_key.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5, 1));

        list_output.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                list_outputMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(list_output);

        ta_output.setEditable(false);
        ta_output.setColumns(20);
        ta_output.setRows(5);
        jScrollPane2.setViewportView(ta_output);

        btn_auto.setBackground(new java.awt.Color(51, 51, 51));
        btn_auto.setFont(new java.awt.Font("Titillium Web Light", 0, 12)); // NOI18N
        btn_auto.setForeground(new java.awt.Color(255, 255, 153));
        btn_auto.setText("AUTOCOMPLETE");
        btn_auto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_autoActionPerformed(evt);
            }
        });

        btn_suggest.setBackground(new java.awt.Color(51, 51, 51));
        btn_suggest.setFont(new java.awt.Font("Titillium Web Light", 0, 12)); // NOI18N
        btn_suggest.setForeground(new java.awt.Color(255, 255, 153));
        btn_suggest.setText("SUGGEST");
        btn_suggest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_suggestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(16, 16, 16))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_suggest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_input))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinner_key, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_auto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(spinner_key, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_auto))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_suggest)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tf_inputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_inputKeyTyped

    }//GEN-LAST:event_tf_inputKeyTyped

    private void tf_inputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_inputKeyPressed

    }//GEN-LAST:event_tf_inputKeyPressed

    private void tf_inputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_inputKeyReleased

        char last_letter = tf_input.getText().charAt(tf_input.getText().length() - 1); //Getting the last character of the letter

        if (tf_input.getText().length() != 0) {
            new_string = tf_input.getText().substring(0, tf_input.getText().length() - 1); //Getting the letter without the last character of the text
        }

        if (evt.getKeyChar() == 46) {
            if_pressed = true; //If the pressed key is comma, equalizing boolean to true
        }

        if (evt.getKeyChar() >= 97 && evt.getKeyChar() <= 122 && if_pressed == true) { //If our character is lower case
            new_string += (char) (last_letter - 32); //Capitalizing the character and adding it into the string
            tf_input.setText(new_string);
            if_pressed = false; //Converting back our boolean variable to false
        }

    }//GEN-LAST:event_tf_inputKeyReleased

    private void tf_inputMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tf_inputMouseReleased

    }//GEN-LAST:event_tf_inputMouseReleased

    private void tf_inputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tf_inputMouseClicked


    }//GEN-LAST:event_tf_inputMouseClicked

    private void tf_inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_inputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_inputActionPerformed

    private void btn_autoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_autoActionPerformed

        if (tf_input.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Don't leave input area empty!"); //Warning message
        }

        Color red_color = Color.RED; //Creating red color

        //Defining variables
        String first_sub = "";
        String second_sub = "";
        String closest = "";
        String output = "";

        for (int i = 0; i < tf_input.getSelectionStart(); i++) {
            first_sub += tf_input.getText().charAt(i); //Splitting word from the first index and last index of the selectedText
        }

        for (int i = tf_input.getSelectionEnd(); i < tf_input.getText().length(); i++) {
            second_sub += tf_input.getText().charAt(i); //Splitting word from the first index and last index of the selectedText
        }

        closest = bt.getClosestMatch(tf_input.getSelectedText()); //Getting closest match to the selectedText

        output = first_sub + closest + " " + second_sub; //Merging all of the substrings

        tf_input.setText(output);
        ta_output.setText(output);

        highlight(ta_output, closest); //Highlighting the corrected word
    }//GEN-LAST:event_btn_autoActionPerformed

    private void btn_suggestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_suggestActionPerformed

        if (tf_input.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Don't leave input area empty!"); //Warning message
        } else {

            //Checking suggestion count for warning message
            if (suggestion_count > 0) {

                start_index = tf_input.getSelectionStart();
                end_index = tf_input.getSelectionEnd();

                //Creating a binary tree for suggested words
                AhmedMuazAtikObadaMasriBinaryTree<T> suggested_bt = bt.getClosestMatches(bt, tf_input.getSelectedText(), (int) spinner_key.getValue());

                //Adding suggestions into list model
                suggested_bt.addIntoListModel(suggested_bt.root);

                //Creating a list for holding all of the suggestions
                DefaultListModel def_model = suggested_bt.addIntoListModel(suggested_bt.root);

                removeDuplicates(def_model);

                //Setting model of the list
                list_output.setModel(def_model);
            } else {
                JOptionPane.showMessageDialog(rootPane, "Double click to suggestion for correction!"); //Warning message

                suggestion_count++; //Increasing the suggestion count

                start_index = tf_input.getSelectionStart();
                end_index = tf_input.getSelectionEnd();

                //Creating a binary tree for suggested words
                AhmedMuazAtikObadaMasriBinaryTree<T> suggested_bt = bt.getClosestMatches(bt, tf_input.getSelectedText(), (int) spinner_key.getValue());

                //Adding suggestions into list model
                suggested_bt.addIntoListModel(suggested_bt.root);

                //Creating a list for holding all of the suggestions
                DefaultListModel def_model = suggested_bt.addIntoListModel(suggested_bt.root);

                removeDuplicates(def_model);

                //Setting model of the list
                list_output.setModel(def_model);
            }
        }
    }//GEN-LAST:event_btn_suggestActionPerformed

    private void list_outputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_list_outputMouseClicked

        String first = "";
        String end = "";
        String closest = "";
        String value = "";

        for (int i = 0; i < start_index; i++) {
            first += tf_input.getText().charAt(i); //Splitting word from the first index and last index of the selectedText
        }

        for (int i = end_index; i < tf_input.getText().length(); i++) {
            end += tf_input.getText().charAt(i); //Splitting word from the first index and last index of the selectedText
        }

        //Checking for double click to LMB
        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1) {

            closest = list_output.getSelectedValue(); //Getting selected value from the list

            value = first + closest + end; //Merging the substrings

            tf_input.setText(value);
            ta_output.setText(value);

            highlight(ta_output, closest); //Highlighting the corrected word
        }

    }//GEN-LAST:event_list_outputMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AhmedMuazAtikObadaMasriGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AhmedMuazAtikObadaMasriGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AhmedMuazAtikObadaMasriGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AhmedMuazAtikObadaMasriGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AhmedMuazAtikObadaMasriGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_auto;
    private javax.swing.JButton btn_suggest;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> list_output;
    private javax.swing.JSpinner spinner_key;
    private javax.swing.JTextArea ta_output;
    private javax.swing.JTextField tf_input;
    // End of variables declaration//GEN-END:variables
}
